wins = [1223125, 2128437, 2128500, 2741001, 4567687, 4567890, 7495938, 9314543]
my_ticket = 4567890


def find_element(sorted_numbers, element):
    """Находит индекс element в отсортированном списке sorted_numbers."""
    # Левая граница (левый индекс) рассматриваемого набора элементов. 
    # В начале работы она равна индексу первого элемента в списке.
    left = 0
    # Правая граница (правый индекс) рассматриваемого набора элементов. 
    # В начале работы она равна индексу последнего элемента в списке.
    right = len(sorted_numbers) - 1
    # Пока левая граница меньше правой или равна ей:
    while left <= right:
        # Находим в наборе элементов индекс среднего элемента.
        mid = (left + right) // 2
        # Если элемент с этим индексом равен искомому, возвращаем его индекс.
        if sorted_numbers[mid] == element:
            return mid
        # Если средний элемент меньше искомого...
        if sorted_numbers[mid] < element:
            # ...то изменяем левую границу поиска:
            left = mid + 1
        # Если средний элемент больше искомого...
        else:
            # ...то изменяем правую границу поиска:
            right = mid - 1
    # Если левая граница оказалась больше правой, 
    # значит, элемент не найден. Возвращаем None.
    return None


def binary_search(arr, x, left, right):
    if right < left:  # Если правая граница оказалась левее левой.
        return None

    mid = (left + right) // 2  # Получаем индекс среднего элемента.
    if arr[mid] == x:  # Если искомый элемент найден:
        return mid
    if x < arr[mid]:  # Если искомое значение меньше среднего...
        # ...следует продолжить поиск в левой половине массива:
        return binary_search(arr, x, left, mid - 1)
    else:  # В ином случае продолжим поиск в правой половине массива:
        return binary_search(arr, x, mid + 1, right)


if __name__ == '__main__':
    print(find_element(wins, my_ticket))

    # На старте запускаем бинарный поиск по всей длине массива.
    index = binary_search(wins, my_ticket, left=0, right=(len(wins) - 1))
    print(index)

